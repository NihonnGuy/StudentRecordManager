#include <iostream>
#include <iomanip>
#include <string>
#include <algorithm>

using namespace std;

const int MAX = 100;

struct Student {
    int id;
    string firstName;
    string lastName;
    string course;
    float gpa;
};

Student students[MAX];
int studentCount = 0;

// Helper to find student by ID
int findStudentByID(int id) {
    for (int i = 0; i < studentCount; ++i) {
        if (students[i].id == id)
            return i;
    }
    return -1;
}

void addStudent() {
    if (studentCount >= MAX) {
        cout << "Student limit reached.\n";
        return;
    }

    Student s;
    cout << "Enter Student ID: ";
    cin >> s.id;

    if (findStudentByID(s.id) != -1) {
        cout << "Duplicate ID. Entry not added.\n";
        return;
    }

    cout << "Enter First Name: ";
    cin >> s.firstName;
    cout << "Enter Last Name: ";
    cin >> s.lastName;
    cout << "Enter Course: ";
    cin >> s.course;
    cout << "Enter GPA: ";
    cin >> s.gpa;

    students[studentCount++] = s;
    cout << "Student added successfully.\n";
}

void editStudent() {
    if (studentCount == 0) {
        cout << "No student records available.\n";
        return;
    }

    int id;
    cout << "Enter Student ID to edit: ";
    cin >> id;

    int index = findStudentByID(id);
    if (index == -1) {
        cout << "Student not found.\n";
        return;
    }

    cout << "Editing student data:\n";
    cout << "Enter New First Name: ";
    cin >> students[index].firstName;
    cout << "Enter New Last Name: ";
    cin >> students[index].lastName;
    cout << "Enter New Course: ";
    cin >> students[index].course;
    cout << "Enter New GPA: ";
    cin >> students[index].gpa;

    cout << "Student data updated.\n";
}

void deleteStudent() {
    if (studentCount == 0) {
        cout << "No student records available.\n";
        return;
    }

    int id;
    cout << "Enter Student ID to delete: ";
    cin >> id;

    int index = findStudentByID(id);
    if (index == -1) {
        cout << "Student not found.\n";
        return;
    }

    cout << "Are you sure you want to delete this student? (Y/N): ";
    char confirm;
    cin >> confirm;
    if (toupper(confirm) == 'Y') {
        for (int i = index; i < studentCount - 1; ++i)
            students[i] = students[i + 1];
        studentCount--;
        cout << "Student deleted successfully.\n";
    } else {
        cout << "Deletion canceled.\n";
    }
}

void viewStudents() {
    if (studentCount == 0) {
        cout << "No student records to display.\n";
        return;
    }

    cout << "\nView Options:\n[1] Alphabetically\n[2] By GPA\nChoice: ";
    int choice;
    cin >> choice;

    Student sorted[MAX];
    copy(students, students + studentCount, sorted);

    if (choice == 1) {
        sort(sorted, sorted + studentCount, [](Student a, Student b) {
            return a.lastName < b.lastName;
        });
    } else if (choice == 2) {
        sort(sorted, sorted + studentCount, [](Student a, Student b) {
            return a.gpa < b.gpa;
        });
    } else {
        cout << "Invalid choice.\n";
        return;
    }

    cout << "\nStudent Records:\n";
    cout << left << setw(10) << "ID" << setw(15) << "First Name" << setw(15)
         << "Last Name" << setw(15) << "Course" << setw(5) << "GPA" << endl;

    for (int i = 0; i < studentCount; ++i) {
        cout << left << setw(10) << sorted[i].id << setw(15) << sorted[i].firstName
             << setw(15) << sorted[i].lastName << setw(15) << sorted[i].course
             << fixed << setprecision(2) << sorted[i].gpa << endl;
    }
}

int main() {
    int choice;
    do {
        cout << "\n--- Student Record Menu ---\n";
        cout << "[1] Add Student\n[2] Edit Student\n[3] Delete Student\n";
        cout << "[4] View Student\n[5] Exit\n";
        cout << "Select an option: ";
        cin >> choice;

        switch (choice) {
            case 1: addStudent(); break;
            case 2: editStudent(); break;
            case 3: deleteStudent(); break;
            case 4: viewStudents(); break;
            case 5: cout << "Exiting program...\n"; break;
            default: cout << "Invalid option.\n";
        }
    } while (choice != 5);

    return 0;
}
